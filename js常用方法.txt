join():接收一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串.

push():方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度.

pop():从数组末尾移除后一项，减少数组的 length 值，然后返回移除的项.

shift():移除数组中的第一个项并返回该项，同时将数组长度减 1

sort():重排序，排序数组需要结合以下代码
	function compare(value1, value2){     
		return value2 - value1;  //value1-value2 从大到小排序
	}
	values.sort(compare);  //从小到大排序

concat(): 用于拼接两个数组，参数为拼接的数组，需要定义一个变量来接收，原数组不变

slice():用于截取数组，类似字符串的substring

splice():可用于删除，添加，替换,第一个参数是起始位置，第二个参数是移除的数量
	
	var colors = ["red", "green", "blue"]; 
	var removed = colors.splice(0,1);                // 删除第一项
	removed = colors.splice(1, 0, "yellow", "orange");    // 从位置 1 开始插入两项 
	removed = colors.splice(1, 1, "red", "purple");      // 从位置 1 开始删除一项 ，插入两项

迭代方法：传入这些方法中的函数会接收三个参数：数 组项的值、该项在数组中的位置和数组对象本身。

every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。 ?
filter()：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。 ?
forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。 ? 
map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。 
some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。

Data.now()：返回表示调用这个方法时的日期和时间的毫秒数
	var start = Date.now();  //取得开始时间 
	doSomething();  //调用函数
	var stop = Date.now() //取得停止时间 
     	result = stop – start; 

toFixed()：按照指定的小数位返回数值的字符串表示
	alert(num.toFixed(2));     //"10.00" 

charAt(）：以单字符字符串的形式返回给定位置的那个字符 
	var stringValue = "hello world"; 
	alert(stringValue.charAt(1));   //"e" 

charCodeAt()：返回字符编码
	alert(stringValue.charCodeAt(1));   //输出"101" 

substr()：截取字符串，第二个参数是截取长度
substring():截取字符串，第二个参数是最后一个截取的索引

indexOf()和lastIndexOf()：获取子字符串的索引，没有返回-1

trim()：去掉字符串前面和后面的空格

toUpperCase()：字符串转大写
toLowerCase()：字符串转小写

replace()：。要想替 换所有子字符串，唯一的办法就是提供一个正则表达式，而且要指定全局（g）标志
	var result = text.replace("at", "ond"); 	
	alert(result);    //"cond, bat, sat, fat"  
	result = text.replace(/at/g, "ond"); 	
	alert(result);    //"cond, bond, sond, fond" 
	result = text.replace(/(.at)/g, "word ($1)"); 
	alert(result);    //word (cat), word (bat), word (sat), word (fat)

split():分割字符串，返回数组

Math:
Math.max():取最大值
Math.min():取最小值
Math.ceil():执行向上舍入，即它总是将数值向上舍入为接近的整数； ? 
Math.floor():执行向下舍入，即它总是将数值向下舍入为接近的整数； ? 
Math.round():执行标准舍入，即它总是将数值四舍五入为接近的整数

Object.getOwnPropertyNames()：获取所有实例属性

BOM:
window.outerWidth 和 window.outerHeight 返回浏览器窗口本身的尺寸
window.innerWidth 和 window.innerHeight 则表示该容器中页面视图区的大小（减去边框宽度）。

window.open():打开一个新的浏览器窗口,第一个参数为url，第二个为窗口名，第三个可以设置窗口大小等属性
	window.open("http://www.wrox.com/","wroxWindow","height=400,width=400,top=10,left=10,resizable=yes"); 

alert()、confirm()和 prompt()：第二个确定框，第三个可以输入文本
window.print()://显示“打印”对话框
location.href="":加载url
location.reload()：重新加载当前页面，如果参数为true，则从服务器重新加载

检查插件：
 //检测插件（在 IE中无效） 
function hasPlugin(name){     
	name = name.toLowerCase();     
	for (var i=0; i < navigator.plugins.length; i++){         
		if (navigator. plugins [i].name.toLowerCase().indexOf(name) > -1){             
			return true;         
		}    
	}  
   	return false; 
}  
//检测 Flash 
alert(hasPlugin("Flash"));  
//检测 QuickTime 
alert(hasPlugin("QuickTime"));  

history.go():参数为对用户历史记录的跳转，-1为后退一页，1为前进一页


DOM：
cloneNode()：复制节点参数为true时复制节点及其子节点，false只复制本节点
	var deepList = myList.cloneNode(true); 
	alert(deepList.childNodes.length);   //3（IE < 9）或 7（其他浏览器）  
	var shallowList = myList.cloneNode(false); 
	alert(shallowList.childNodes.length);  //0  

querySelector():参数为css选择符,匹配第一个找到的元素

childElementCount：返回子元素（不包括文本节点和注释）的个数。 
firstElementChild：指向第一个子元素；firstChild 的元素版。 
lastElementChild：指向后一个子元素；lastChild 的元素版。 
previousElementSibling：指向前一个同辈元素；previousSibling 的元素版。 
nextElementSibling：指向后一个同辈元素；nextSibling 的元素版。 

window.toStaticHTML():删除所有脚本节点和事件处理程序属性

insertAdjacentHTML()：接收两个参数：插入位置和要插入的 HTML文本
"beforebegin"，在当前元素之前插入一个紧邻的同辈元素； ? 
"afterbegin"，在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素； ? 
"beforeend"，在当前元素之下插入一个新的子元素或在后一个子元素之后再插入新的子元素； ? 
"afterend"，在当前元素之后插入一个紧邻的同辈元素

scrollIntoView(）：参数为true时窗口滚到元素的top出，为false时窗口滚到元素的bottom处
scrollIntoViewIfNeeded(）：与上面方法相近，不同的是这个方法需要界面没显示才触发
scrollByLines(lineCount)：将元素的内容滚动指定的行高
scrollByPages(pageCount)：将元素的内容滚动指定的页面高度

DOM2、3:
cssText:能够访问到 style 特性中的 CSS代码
style.removeProperty():参数移除某个 CSS属性

scrollTop:设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离
offsetTop:获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置，只读
event.clientY 相对文档的垂直座标
event.offsetY 相对容器的垂直坐标

事件：
event.stopPropagation() : 阻止事件冒泡
event.preventDefault()：阻止特定事件的默认行为，比如a标签的连接导航
	a.addEventListener('click',function(event){				
				event.preventDefault();
			})

event.clientX,event.clientY:示事件发生时鼠标指针在视口中的水平 和垂直坐标
event.pageX,event.pageY:鼠标光标在页面中的位置
event.screenX,event.screenY:事件发生时鼠标指针相对于整个屏幕的坐标信息

event.shiftKey、event.ctrlKey、event.altKey 和event.metaKey:判断是否发生事件时同时按下shift,ctrl,alt,meta键
event.inputMethod:文本输入到文本框中的方式

表单：
document.forms：获取页面所有表单
form.elements：获取表单所有字段
button.disabled(true):禁用按钮
required属性：在提交表单时不能空，提交会有相应提示
对于数值类型的输入，可以指定min，max和倍数
<input type="number" min="0" max="100" step="5" name="count"> 
pattern属性：正则表达式
select:change():选择框的 change 事件只要选中了选项就会触发


Canvas绘图：var drawing = document.getElementById("canvas");
drawing.getContext:确定浏览器支持<canvas>元素 
var context = drawing.getContext("2d"); 取得2d上下文对象
context.fillStyle：填充颜色
context.strokeStyle :描边颜色

context.fillStyle:绘制矩形的填充颜色
context.fillRect():绘制矩形填充的x,y,width,height
context.strokeStyle：绘制矩形的描边颜色
context.strokeRect():绘制矩形描边的x,y,width,height

context.clearRect()方法用于清除画布上的矩形区域：x,y,width,height

绘制路径:
context.arc(x, y, radius, startAngle, endAngle, counterclockwise)：(x,y)为圆心,弧线半径为 radius，
	起始和结束角度（用弧度表示）分别为 startAngle 和 endAngle, 
	counterclockwise是否按逆时针方向计算，值为 false 表示按顺时针方向计算

context.lineTo(x, y)：从上一点开始绘制一条直线，到(x,y)为止。 
context.moveTo(x, y)：将绘图游标移动到(x,y)，不画线
context.fill():填充
context.stroke():描边路径

绘制文本：
context.fillText():接收 4 个参数：要绘制的文本字符串、x 坐 标、y坐标和可选的大像素宽度
context.font:表示文本样式、大小及字体，用 CSS中指定字体的格式来指定
context.textAlign:表示文本对齐方式。可能的值有"start"、"end"和"center"
context.textBaseline：表示文本的基线。可能的值有"top"、"hanging"、"middle"、"alphabetic"、"ideographic"和"bottom"

变换：
context.rotate(angle)：围绕原点旋转图像 angle 弧度
context.scale(scaleX,scaleY):缩放图像，在 x方向乘以 scaleX，在 y方向乘以 scaleY。scaleX 和 scaleY 的默认值都是 1.0
context.translate(x, y)：将坐标原点移动到(x,y)。执行这个变换之后，坐标(0,0)会变成之前由(x,y) 表示的点。 ? 
context.save():保存某组属性与变换的组合
context.restore()：返回上一个属性或变换的组合

绘制图像：
context.drawImage(image,x,y，width，height)：<img>元素，以及绘制该图像的起点的 x和 y坐标

渐变:
context.createLinearGradient(x1,y1, x2,y2):起点的 x坐标、起点的 y坐 标、终点的 x 坐标、终点的 y 坐标
	var gradient = context.createLinearGradient(30, 30, 70, 70);  
	gradient.addColorStop(0, "white"); 
	gradient.addColorStop(1, "black"); 
	context.fillStyle = gradient; 
	context.fillRect(30, 30, 50, 50);

context.createRadialGradient():前三个参数指定的是起点圆的原心（x 和 y）及半径，
	后三个参数指 定的是终点圆的原心（x 和 y）及半径.
	var gradient = context.createRadialGradient(55, 55, 10, 55, 55, 30);  
	gradient.addColorStop(0, "white"); 
	gradient.addColorStop(1, "black");			

context.createPattern(image, "repeat"):显示重复的图像		
	context.fillStyle = pattern; 
	context.fillRect(10, 10, 150, 150); 

context.getImageData(10, 5, 50, 50):要取得原始图像数据的画面区域的 x和 y坐标以及该区域的像素宽度和高度.
context.putImageData(imageData,x,y):把图像数据绘制到画布上.
	每个 ImageData 对象都有三个属性：width、height 和 data。其中 data 属性是一个数组，保存着图像中每一个像素的数据。
	在 data 数组中，每一个像素用4个元素来保存，分别表示红、绿、蓝和透明度值。每个元素的值都介于 0到 255。
	var data = imageData.data,     
	red = data[0],     
	green = data[1],     
	blue = data[2],     
	alpha = data[3];

 	//绘制原始图
	context.drawImage(image, 0, 0);  
    	//取得图像数据     
	imageData = context.getImageData(0, 0, image.width, image.height);     
	data = imageData.data;  
    	for (i=0, len=data.length; i < len; i+=4){  
        	red = data[i];         
		green = data[i+1];         
		blue = data[i+2];         
		alpha = data[i+3];  
      	  //求得 rgb 平均值         
		average = Math.floor((red + green + blue) / 3);  
     	   //设置颜色值，透明度不变         
		data[i] = average;         
		data[i+1] = average;         
		data[i+2] = average;  
   	 }        
	//回写图像数据并显示结果     
	imageData.data = data;     
	context.putImageData(imageData, 0, 0); 

context.globalAlpha:修改全局透明度,默认值为0

拖动事件
draggable：可拖动属性，默认值false

XML：


JSON:
JSON不支持 JavaScript中的特殊值 undefined;

JSON表示上述对象的方式如下：  
	{      
		"name": "Nicholas",     
		"age": 29 
	}  

没有声明变量（JSON中没 有变量的概念),没有末尾的分号,对象的属性必须加双引号

	var book = [
		{
			"title":"one",
			 "authors": [
					"Nicholas C. Zakas"                 
			 ],
					 
		},
		{
			"title":"two",
			"authors":[
			"two authors"
			],
		}
	];
			
	var jsonText = JSON.stringify(book,["title","authors"]);

JSON.stringify():把一个 JavaScript对象序列化为一个 JSON字符串
JSON.parse():将 JSON字符串直接传递给 JSON.parse()就可以得到相应的 JavaScript值。
	var bookCopy = JSON.parse(jsonText); 
虽然 book 与 bookCopy 具有相同的属性，但它们是两个独立的、没有任何关系的对象。 
